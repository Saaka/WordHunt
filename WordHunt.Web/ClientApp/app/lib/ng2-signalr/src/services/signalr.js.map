{"version":3,"file":"signalr.js","sourceRoot":"","sources":["../../../src/services/signalr.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISignalRConnection } from './connection/i.signalr.connection';\r\nimport { SignalRConfiguration } from './signalr.configuration';\r\nimport { SignalRConnection } from './connection/signalr.connection';\r\nimport { NgZone, Injectable } from '@angular/core';\r\nimport { IConnectionOptions } from './connection/connection.options';\r\n\r\ndeclare var jQuery: any;\nexport class SignalR {\nprivate _configuration: SignalRConfiguration;\nprivate _zone: NgZone;\nprivate _jHubConnectionFn: any;\n/**\n * @param {?} configuration\n * @param {?} zone\n * @param {?} jHubConnectionFn\n */\npublic constructor(configuration: SignalRConfiguration, zone: NgZone, jHubConnectionFn: Function) {\r\n        this._configuration = configuration;\r\n        this._zone = zone;\r\n        this._jHubConnectionFn = jHubConnectionFn;\r\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\npublic connect(options?: IConnectionOptions): Promise<ISignalRConnection> {\r\n\r\n        let /** @type {?} */ $promise = new Promise<SignalRConnection>((resolve, reject) => {\r\n\r\n            let /** @type {?} */ configuration = this.merge(options ? options : {});\r\n\r\n            try {\r\n                let /** @type {?} */ serialized = JSON.stringify(configuration.qs);\r\n\r\n                if (configuration.logging) {\r\n                    console.log(`Connecting with...`);\r\n                    console.log(`configuration:[url: '${configuration.url}'] ...`);\r\n                    console.log(`configuration:[hubName: '${configuration.hubName}'] ...`);\r\n                    console.log(`configuration:[qs: '${serialized}'] ...`);\r\n                }\r\n            } catch ( /** @type {?} */err) {}\r\n\r\n            // create connection object\r\n            let /** @type {?} */ jConnection = this._jHubConnectionFn(configuration.url);\r\n            jConnection.logging = configuration.logging;\r\n            jConnection.qs = configuration.qs;\r\n\r\n            // create a proxy\r\n            let /** @type {?} */ jProxy = jConnection.createHubProxy(configuration.hubName);\r\n            // !!! important. We need to register at least one on function otherwise server callbacks will not work.\r\n            jProxy.on('noOp', function () { });\r\n\r\n            let /** @type {?} */ hubConnection = new SignalRConnection(jConnection, jProxy, this._zone);\r\n            // start the connection\r\n            console.log('Starting SignalR connection ...');\r\n\r\n            jConnection.start({ withCredentials: configuration.withCredentials, jsonp: configuration.jsonp })\r\n                .done(() => {\r\n                    console.log('Connection established, ID: ' + jConnection.id);\r\n                    console.log('Connection established, Transport: ' + jConnection.transport.name);\r\n                    resolve(hubConnection);\r\n                })\r\n                .fail((error: any) => {\r\n                    console.log('Could not connect');\r\n                    reject('Failed to connect. Error: ' + error.message); // ex: Error during negotiation request.\r\n                });\r\n        });\r\n\r\n        return $promise;\r\n    }\n/**\n * @param {?} overrides\n * @return {?}\n */\nprivate merge(overrides: IConnectionOptions): SignalRConfiguration {\r\n        let /** @type {?} */ merged: SignalRConfiguration = new SignalRConfiguration();\r\n        merged.hubName = overrides.hubName || this._configuration.hubName;\r\n        merged.url = overrides.url || this._configuration.url;\r\n        merged.qs = overrides.qs || this._configuration.qs;\r\n        merged.logging = this._configuration.logging;\r\n        merged.jsonp = overrides.jsonp || this._configuration.jsonp;\r\n        merged.withCredentials = overrides.withCredentials || this._configuration.withCredentials;\r\n        return merged;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SignalRConfiguration, },\n{type: NgZone, },\n{type: Function, },\n];\n}\n\nfunction SignalR_tsickle_Closure_declarations() {\n/** @type {?} */\nSignalR.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSignalR.ctorParameters;\n/** @type {?} */\nSignalR.prototype._configuration;\n/** @type {?} */\nSignalR.prototype._zone;\n/** @type {?} */\nSignalR.prototype._jHubConnectionFn;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}